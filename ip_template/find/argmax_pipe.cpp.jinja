/*
numpy.argmax(a, axis=None, out=None)
Returns the indices of the maximum values along an axis.

Parameters
    a : Input array. 
    axis : int, optional
        By default, the index is into the flattened array, otherwise along the specified axis.
    out: array, optional
        If provided, the result will be inserted into this array. It should be of the appropriate shape and dtype.    
Returns
    index_array: Array of indices into the array.
        It has the same shape as a.shape with the dimension along axis removed.
*/
#include "{{top_name}}.h"

int argmax_kernel{{s0}}(
            {% for i in range(s0-1) %}{{d0}} a_0_{{i}},
            {% endfor %}{{d0}} a_0_{{s0-1}})
{
      {% for i in range(1,log2_kernel_size+1) %}{{d0}} {% for j in range(((s0//(2**i)))-1)%}a_{{i}}_{{j}},{% endfor %}a_{{i}}_{{ (s0//(2**i))-1}};  
      {% endfor %}

      {% for i in range(1,log2_kernel_size+1) %}int {% for j in range(((s0//(2**i)))-1)%}index_a_{{i}}_{{j}},{% endfor %}index_a_{{i}}_{{ (s0//(2**i))-1}}; 
      {% endfor %}

      {% for i in [1] %}{% for j in range(((s0//(2**i))))%}
      if (a_{{i-1}}_{{j*2}} > a_{{i-1}}_{{j*2+1}}){
              a_{{i}}_{{j}} = a_{{i-1}}_{{j*2}};
              index_a_{{i}}_{{j}} = {{j*2}};
         }else {
              a_{{i}}_{{j}} = a_{{i-1}}_{{j*2+1}};
              index_a_{{i}}_{{j}} = {{j*2+1}};
         }{% endfor %}
      {% endfor %}

      {% for i in range(2,log2_kernel_size+1) %}{% for j in range(((s0//(2**i))))%}
      if (a_{{i-1}}_{{j*2}} > a_{{i-1}}_{{j*2+1}}){
              a_{{i}}_{{j}} = a_{{i-1}}_{{j*2}};
              index_a_{{i}}_{{j}} = index_a_{{i-1}}_{{j*2}};
         }else {
              a_{{i}}_{{j}} = a_{{i-1}}_{{j*2+1}};
              index_a_{{i}}_{{j}} = index_a_{{i-1}}_{{j*2+1}};
         }{% endfor %}
      {% endfor %}

      return index_a_{{log2_kernel_size}}_0;
}

int {{top_name}}({{d0}} input[{{s0}}])  {

    int  ret = argmax_kernel{{s0}}(
            {% for i in range(s0-1) %} input[{{i}}],
            {% endfor %} input[{{s0-1}}]);
    return ret;

}

