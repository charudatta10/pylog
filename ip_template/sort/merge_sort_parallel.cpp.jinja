#include "{{top_name}}.h"
#include "assert.h"

void merge_arrays({{d0}} in[{{s0}}], int width, {{d0}} out[{{s0}}]) {
  int f1 = 0;
  int f2 = width;
  int i2 = width;
  int i3 = 2*width;
  if(i2 >= {{s0}}) i2 = {{s0}};
  if(i3 >= {{s0}}) i3 = {{s0}};
 merge_arrays:
  for (int i = 0; i < {{s0}}; i++) {
#pragma HLS pipeline II=1
      {{d0}} t1 = in[f1];
      {{d0}} t2 = (f2 == i3) ? 0 : in[f2];
    if(f2 == i3 || (f1 < i2 && t1 <= t2)) {
	  out[i] = t1;
	  f1++;
	} else {
	  assert(f2 < i3);
	  out[i] = t2;
	  f2++;
	}
	if(f1 == i2 && f2 == i3) {
      f1 = i3;
	  i2 += 2*width;
	  i3 += 2*width;
	  if(i2 >= {{s0}}) i2 = {{s0}};
	  if(i3 >= {{s0}}) i3 = {{s0}};
      f2 = i2;
 	}
  }
}

void {{top_name}}({{d0}} A[s0], {{d0}} B[s0]) {
#pragma HLS dataflow

	{{d0}} temp[{{v0}}-1][{{s0}}];
#pragma HLS array_partition variable=temp complete dim=1
	int width = 1;

	merge_arrays(A, width, temp[0]);
	width *= 2;

	for (int stage = 1; stage < {{v0}}-1; stage++) {
#pragma HLS unroll
		merge_arrays(temp[stage-1], width, temp[stage]);
		width *= 2;
	}

	merge_arrays(temp[{{v0}}-2], width, B);
}

